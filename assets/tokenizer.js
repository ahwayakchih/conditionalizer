/*
 *  Result is an array with 4 items:
 *  - selector (string)
 *  - selected values (array)
 *  - check (string)
 *  - checked values (array)
 *  Each value can be either a string (which means it can be text value, or a parameter) or array (which means it is a sub-condition).
 *  Value can be ampty array, which means it is "NULL".
 *
 *  TODO: there is a problem with regexp as "matches" and "matches not" value. If whole regexp is not wrapped with parenthesis, then
 *        parser will split string on first parenthesis used inside that regepx.
 *
 * 	Example result:
 */
/*

[
   "any of",
   [
      "yes",
      "no",
      [
         "value of",
         [
            "yes",
            "whatever",
            [
               "value of",
               [
                  "{$something}"
               ],
               "is",
               [
                  "no"
               ]
            ]
         ],
         "is",
         [
            "no"
         ]
      ],
      "xxx",
      "{$}"
   ],
   "is not in",
   [
      "yes",
      "{$param:$other:default}"
   ]
]

*/

/*
 * 	PEG source:
 */
/*

start
  = condition

whitespace
  = " "

comma
  = ","

condition
  = "(if" whitespace* a:selector whitespace* "(" b:value* ")" whitespace* c:check whitespace* "(" d:value* ")" whitespace* ")"
  { return [a,b,c,d]; }

selector
  = "value of" / "any of" / "all of"

check
  = str:("is" whitespace* "not"? whitespace* "in"? / "are" whitespace* "not"? whitespace* "in" / "matches" whitespace* "not"?)
  { return str.join(" ").replace(/\s+$/, '').replace(/\s+/,' '); }

value
  = whitespace* str:(param comma? / condition comma? / literal comma?) whitespace*
  { str.pop(); return str.length > 0 ? str[0] : ''; }

param "parameter"
  = '{$' str:[^,\s}]+ '}'
  { return '{$' + str.join("") + '}'; }

literal "string"
  = str:([^,()]+ / "(" literal+ ")" )
  { return str.join(""); }

*/

conditionalizer.tokenize = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "whitespace": parse_whitespace,
        "comma": parse_comma,
        "condition": parse_condition,
        "selector": parse_selector,
        "check": parse_check,
        "value": parse_value,
        "param": parse_param,
        "literal": parse_literal
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "condition";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_whitespace() {
        var cacheKey = "whitespace@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos.offset) === 32) {
          result0 = " ";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_comma() {
        var cacheKey = "comma@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos.offset) === 44) {
          result0 = ",";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_condition() {
        var cacheKey = "condition@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "(if") {
          result0 = "(if";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(if\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_whitespace();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_whitespace();
          }
          if (result1 !== null) {
            result2 = parse_selector();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_whitespace();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_whitespace();
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 40) {
                  result4 = "(";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_value();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_value();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 41) {
                      result6 = ")";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_whitespace();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_whitespace();
                      }
                      if (result7 !== null) {
                        result8 = parse_check();
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_whitespace();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_whitespace();
                          }
                          if (result9 !== null) {
                            if (input.charCodeAt(pos.offset) === 40) {
                              result10 = "(";
                              advance(pos, 1);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"(\"");
                              }
                            }
                            if (result10 !== null) {
                              result11 = [];
                              result12 = parse_value();
                              while (result12 !== null) {
                                result11.push(result12);
                                result12 = parse_value();
                              }
                              if (result11 !== null) {
                                if (input.charCodeAt(pos.offset) === 41) {
                                  result12 = ")";
                                  advance(pos, 1);
                                } else {
                                  result12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result12 !== null) {
                                  result13 = [];
                                  result14 = parse_whitespace();
                                  while (result14 !== null) {
                                    result13.push(result14);
                                    result14 = parse_whitespace();
                                  }
                                  if (result13 !== null) {
                                    if (input.charCodeAt(pos.offset) === 41) {
                                      result14 = ")";
                                      advance(pos, 1);
                                    } else {
                                      result14 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                      }
                                    }
                                    if (result14 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c, d) { return [a,b,c,d]; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5], result0[8], result0[11]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_selector() {
        var cacheKey = "selector@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos.offset, 8) === "value of") {
          result0 = "value of";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"value of\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 6) === "any of") {
            result0 = "any of";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"any of\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 6) === "all of") {
              result0 = "all of";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"all of\"");
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_check() {
        var cacheKey = "check@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "is") {
          result0 = "is";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"is\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_whitespace();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_whitespace();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 3) === "not") {
              result2 = "not";
              advance(pos, 3);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"not\"");
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = [];
              result4 = parse_whitespace();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_whitespace();
              }
              if (result3 !== null) {
                if (input.substr(pos.offset, 2) === "in") {
                  result4 = "in";
                  advance(pos, 2);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"in\"");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 === null) {
          pos1 = clone(pos);
          if (input.substr(pos.offset, 3) === "are") {
            result0 = "are";
            advance(pos, 3);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"are\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_whitespace();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
            if (result1 !== null) {
              if (input.substr(pos.offset, 3) === "not") {
                result2 = "not";
                advance(pos, 3);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"not\"");
                }
              }
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result3 = [];
                result4 = parse_whitespace();
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_whitespace();
                }
                if (result3 !== null) {
                  if (input.substr(pos.offset, 2) === "in") {
                    result4 = "in";
                    advance(pos, 2);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"in\"");
                    }
                  }
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 === null) {
            pos1 = clone(pos);
            if (input.substr(pos.offset, 7) === "matches") {
              result0 = "matches";
              advance(pos, 7);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"matches\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              result2 = parse_whitespace();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_whitespace();
              }
              if (result1 !== null) {
                if (input.substr(pos.offset, 3) === "not") {
                  result2 = "not";
                  advance(pos, 3);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"not\"");
                  }
                }
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, str) { return str.join(" ").replace(/\s+$/, '').replace(/\s+/,' '); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_value() {
        var cacheKey = "value@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_whitespace();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_whitespace();
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_param();
          if (result1 !== null) {
            result2 = parse_comma();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 === null) {
            pos2 = clone(pos);
            result1 = parse_condition();
            if (result1 !== null) {
              result2 = parse_comma();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
            if (result1 === null) {
              pos2 = clone(pos);
              result1 = parse_literal();
              if (result1 !== null) {
                result2 = parse_comma();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_whitespace();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_whitespace();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, str) { str.pop(); return str.length > 0 ? str[0] : ''; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_param() {
        var cacheKey = "param@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "{$") {
          result0 = "{$";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{$\"");
          }
        }
        if (result0 !== null) {
          if (/^[^,s}]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^,s}]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^,s}]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^,s}]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 125) {
              result2 = "}";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"}\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, str) { return '{$' + str.join("") + '}'; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("parameter");
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_literal() {
        var cacheKey = "literal@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        if (/^[^,()]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^,()]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^,()]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^,()]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 === null) {
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 40) {
            result0 = "(";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_literal();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_literal();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 41) {
                result2 = ")";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, str) { return str.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("string");
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();