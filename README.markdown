# Field: Filter

- Version: 1.1
- Author: Marcin Konicki (http://ahwayakchih.neoni.net)
- Build Date: 23 April 2011
- Requirements: Symphony version 2.0.2 or later.


## Overview

Field: Filter allows to use expressions to conditionally filter data source by URL parameters ({$param} syntax).

Symphony allows to filter with parameters, but without a way to filter conditionally, e.g., depending on parameter values.

After adding this field to a section, you will be able to filter data source using expressions like this:

	(if value of ({$entry}) is (welcome))

It will allow data source to load entries only when value of $entry parameter is "welcome".

Another example:

	(if any of ({$ds-list}) is in (one,two,three,{$param}))

That will load entries only if any of the values found in $ds-list parameter is equal to "one", "two", "three" or value of $param parameter.

Of course most of that is also possible with built-in filtering, so Filter field is useful mostly when filtering by data source generated parameters or with really complicated stuff (which probably could be simplified by changing site structure :).

Filter field can also be used to minimize number of SQL queries, because when expression evaluates to false, database is not queried at all and data source outputs empty set.


## Installation

1. Upload the 'filterfield' folder in this archive to your Symphony 'extensions' folder.
2. Enable it by selecting the "Field: Filter", choose Enable from the with-selected menu, then click Apply.


## Changelog

- **1.1** Allow using expression to prevent entry from being saved.
- **1.0** Initial release.


## Usage

To filter data source:

1. Add Filter field to section which you want to filter by expression.
2. Check "Allow datasources to filter this section with expression" field.
3. Filter data source of that section by Filter field.

To allow or block saving of an entry:

1. Add Filter field to section which you want to filter by expression.
2. Enter expression which has to evaluate to true before entry can be saved. You can use `{$param}` syntax to make expression use values POSTed from HTML form, e.g., value of field named `fields[published]` can be put into expression using `{$published}`.
3. Edit entry and see if it can or cannot be saved.


## Syntax

	(if SELECTOR (VALUES) OPERAND (VALUES)) 

Expression has to start and end with parenthesis.
There has to be "if" at the start of expression (just in case there will be other functions added in future).

SELECTOR can be "value of", "any of" or "all of".

VALUES is comma separated list of values. Each of them can be either literal value, {$param} or sub expression. Every VALUES has to be inside parenthesis. It can be empty, but parenthesis is required.

OPERAND can be "is", "is not", "is in" or "is not in".


## Examples of using expression to allow saving an entry

If section has checkbox field "published" and entry should not be unpublished if it was saved at least once before (special variable `system:id` will be empty):

	(if any of ((if value of ({$system:id}) is ()), (if value of ({$published}) is (yes))) is (yes))


## Examples of Data Source filtering

If value of data source generated $ds-type param is "mytype", or value of data source generated $ds-true-or-false param is "yes":

	(if any of ((if value of ({$ds-type}) is (mytype)), {$ds-true-or-false}) is (yes))

If any value of data source generated param can be found in value of another data source generated param:

	(if any of ({$ds-list}) is in ({$ds-different-list}))

If value of author param (passed through URL param) can be found in value of param generated by data source:

	(if value of ({$author}) is in ({$ds-list-of-authors-with-additional-info}))

If value of param passed thorugh URL path is "symphony":

	(if value of ({$name}) is (symphony))

If any of values found in data source generated param is empty/null:

    (if any of ({$ds-names}) is ())

