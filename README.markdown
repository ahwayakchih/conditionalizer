# Field: Filter

- Version: 1.1
- Author: Marcin Konicki (http://ahwayakchih.neoni.net)
- Build Date: 23 April 2011
- Requirements: Symphony version 2.0.2 or later.


## Overview

Field: Filter allows to use expressions to conditionally filter data source by URL parameters ({$param} syntax).

Symphony allows to filter with parameters, but without a way to filter conditionally, e.g., depending on parameter values.

After adding this field to a section, you will be able to filter data source using expressions like this:

	(if value of ({$entry}) is (welcome))

It will allow data source to load entries only when value of $entry parameter is "welcome".

Another example:

	(if any of ({$ds-list}) is in (one,two,three,{$param}))

That will load entries only if any of the values found in $ds-list parameter is equal to "one", "two", "three" or value of $param parameter.

Of course most of that is also possible with built-in filtering, so Filter field is useful mostly when filtering by data source generated parameters or with really complicated stuff (which probably could be simplified by changing site structure :).

Filter field can also be used to minimize number of SQL queries, because when expression evaluates to false, database is not queried at all and data source outputs empty set.


## Installation

1. Upload the 'filterfield' folder in this archive to your Symphony 'extensions' folder.
2. Enable it by selecting the "Field: Filter", choose Enable from the with-selected menu, then click Apply.


## Changelog

- **1.1** Allow using expression to prevent entry from being saved. Publish filtering expressions can now use {XPath}. Field now stores "yes" or "no" (when publish filter returns false) value.
- **1.0** Initial release.


## Usage

To filter data source:

1. Add Filter field to section which you want to filter by expression.
2. Check "Allow datasources to filter this section with expression" field.
3. Add filter field as one of filters on data source edit page.
4. Enter expression which, when evaluated to false, will block data source from querying database.
5. You can also enter value to filter data source just like with checkbox field.
6. Enter both expression and value to make field evaluate expression first and, if expression returned true, filter by value later.

To allow or disallow saving of an entry:

1. Add Filter field to section which you want to filter by expression.
2. Enter expression which will be evaluated when entry is saved. If it returns false, field value will be set to "no" in database. Otherwise it will be set to "yes". You can use `{XPath}` syntax to make expression use values found in XML containing `post`, `author`, `old-entry` (if entry is being edited) and `entry` elements, e.g., value of field named `fields[published]` can be put into expression using `{post/published}`.
3. Check "Allow saving entry only if expression above evaluates to true" if field should prevent entry from being saved after expression evaluates to false.
4. Edit entry and see if it can or cannot be saved to database :).


## Syntax

	(if SELECTOR (VALUES) OPERAND (VALUES)) 

Expression has to start and end with parenthesis.
There has to be "if" at the start of expression (just in case there will be other functions added in future).

SELECTOR can be "value of", "any of" or "all of".

VALUES is comma separated list of values. Each of them can be either literal value, {$param} or sub expression. Every VALUES has to be inside parenthesis. It can be empty, but parenthesis is required.

OPERAND can be "is", "is not", "is in" or "is not in".


## Examples of using expression to allow saving an entry

If section has checkbox field "published" and entry should not be unpublished if it was saved at least once before:

	(if any of ((if value of ({concat('id', old-entry/@id)}) is (id)), (if value of (yes) is ({post/published}))) is (yes))

It concats string to old-entry/@id, just in case old-entry is not there (and returns empty string). So, if old-entry is there, value will become "id123" (123 will be real entry ID). If old-entry is not there, value will become "id".
Expression will evaluate to true if it is new entry (old-entry is not there, so "id" is equal to "id") or if value of fields[published] is "yes".


## Examples of Data Source filtering

Allow data source to execute only if value of data source generated $ds-type param is "mytype", or value of data source generated $ds-true-or-false param is "yes":

	(if any of ((if value of ({$ds-type}) is (mytype)), {$ds-true-or-false}) is (yes))

Allow data source to execute only if any value of data source generated param can be found in value of another data source generated param:

	(if any of ({$ds-list}) is in ({$ds-different-list}))

Allow data source to execute only if value of author param (passed through URL param) can be found in value of param generated by data source:

	(if value of ({$author}) is in ({$ds-list-of-authors-with-additional-info}))

Allow data source to execute only if value of param passed thorugh URL path is "symphony":

	(if value of ({$name}) is (symphony))

Allow data source to execute only if any of values found in data source generated param is empty/null:

    (if any of ({$ds-names}) is ())

Allow data source to execute only if any of values found in data source generated param is not empty/null, and then select entries only if they passed publish filter expression (or if there was no publish filtering when they were being saved to database):

    (if any of ({$ds-names}) is not ()), yes

